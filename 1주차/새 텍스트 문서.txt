디자인패턴 책 추천 : headfirst

패턴들의 구현체 모음 : framework

spring 사용이유 : 
	1. trend(유행, 많은 사람들이 사용함) 
	2. EJB의 몰락 > 2000년 초 java의 강세로 EJB(프레임워크를 구현한 서버 솔루션이 꼭 필요함)(컴포넌트라고 보면 됨)를 많이 사용하게 됨
		>> 분산서버 환경에서의 분산 트랜젝션을 지원해줌 ex) 서로 다른서버에서 수정 관리 등등
		>> 많은 기능을 제공해주지만 많은 오류 발생 >> 해결하면서 많이 무거워짐
		>> 유지보수의 문제가 너무 커짐 ex)오타 하나고치는데 4시간 걸림
	

		70 ~ 80 년대 기업전산화 : Procedure(구조적 방법론) 사용 : 일처리순서가 중요 , 프로시져
		80 ~ 90 년대 기업정보화 : Data(RDBMS)(정보공학방법론) : 데이터가 어떻게 저장이 되는게 중요 , 데이터의 흐름 중심 ex) 서울에서 입금하고 제주에서 출금함
		90년대 말 ~ 00 년대 초 정보의 서비스화 : OOP : 사용자중심, 객체지향	>> 큰 하나의 틀에서 객체지향적으로 만듬
		00년대 초 ~ 10 년대 : 정보의 통합(SI)(Component)(CBD) : 서울에서 어플제작 부산에서 어플제작 각각의 지역의 데이터를 갖고있음 > 앱 합병 > 두개의 앱의 통합 필요. 사용자는 통합된 앱을 원함.  이때 EJB솔루션 강세.
		10년대 이후 ~ : 서비스(서비스를 위한)(Agile,객체지향) 위의 객체지향과는 다름 >> 필요한 부분만 빠르게 객체지향적으로 만듬(모듈화)
				클라우드 : 서비스들의 구름. 
				현재 트렌드 클라우드기반의 마이크로서비스

		년도가 흐름에 따라 "기계를 위한 프로그래밍" > "사람(개발자, 고객)을 위한 프로그래밍"

		
		POJO(Plain Old Java Object)운동? : 서비스의 트렌드가 급격히 바뀌는데 기존의 객체지향 방법으로는 너무 느림. 예전의 순수한 객체지향법을 이용하자!
			>> Sping의 탄생 

스칼라 : 함수기반의 언어 , 요즘은 함수가 객체로 인식이 되게 진화됨

전까지의 화두 :  동기화된 프로그래밍 > 요즘 화두 :  비동기 프로그래밍(리스너느낌) >> 스프링




SOLID

단일책임법칙		메소드,class는 하나의 책임만 갖는다
개방폐쇄법칙		다형성을 이용한 확장
리스코프대체		하위클래스는 상위클래스로 대체 / 치환될수 있어야한다
인터페이스분리법칙	
의존성역전법칙		객체간의 의존성을 역전시키자. > 의존성 주입등


TDD
: Known to Unknown , Separate Of Concern(현재의 문제에서부터 시작해라), Kent Beck
지금 우리가 알고 있는것 , 우리가 모르고 있는것을 확실히 알아야함.